/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        lpar {
            bindings = <&kp LPAR>;
            key-positions = <15 16>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <14 15>;
        };

        rpar {
            bindings = <&kp RPAR>;
            key-positions = <19 20>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <20 21>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp TAB          &kp Q  &kp W  &kp E         &kp R            &kp T        &kp Y      &kp U           &kp I      &kp O    &kp P     &kp LBKT
  &mt LCTRL GRAVE  &kp A  &kp S  &kp D         &kp F            &kp G        &kp H      &kp J           &kp K      &kp L    &kp SEMI  &mt RCTRL SQT
  &mt LALT EQUAL   &kp Z  &kp X  &kp C         &kp V            &kp B        &kp N      &kp M           &kp COMMA  &kp DOT  &kp FSLH  &mt RALT MINUS
                          &none  &mt LGUI TAB  &mt LSHFT SPACE  &lt 2 RET    &lt 1 ESC  &mt RSHFT BSPC  &kp RGUI   &none
            >;
        };

        lower_layer {
            bindings = <
  &trans  &kp EXCL   &kp AT    &kp HASH   &kp DOLLAR  &kp PRCNT    &none   &kp N7  &kp N8     &kp F9  &none  &none
  &trans  &kp CARET  &kp AMPS  &kp ASTRK  &none       &none        &none   &kp N4  &kp N5     &kp N6  &none  &trans
  &trans  &none      &none     &none      &none       &none        &kp N0  &kp N1  &kp N2     &kp N3  &none  &trans
                     &trans    &trans     &trans      &trans       &trans  &trans  &lt 3 DEL  &trans
            >;
        };

        raise_layer {
            bindings = <
  &trans  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS    &kp HOME                      &kp PAGE_DOWN                 &kp PG_UP                     &kp END                       &none  &none
  &trans  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS     &kp LEFT                      &kp DOWN_ARROW                &kp UP                        &kp RIGHT                     &none  &trans
  &trans  &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT      &kp LS(LA(LC(LG(NUMBER_1))))  &kp LS(LA(LC(LG(NUMBER_2))))  &kp LS(LA(LC(LG(NUMBER_3))))  &kp LS(LA(LC(LG(NUMBER_4))))  &none  &trans
                           &trans     &trans     &trans     &trans          &trans                        &trans                        &trans                        &trans
            >;
        };

        adjust_layer {
            bindings = <
  &bootloader  &none         &none         &none         &none         &none           &none   &none  &none   &none  &none  &bootloader
  &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none  &none   &none  &none  &bt BT_CLR
  &sys_reset   &none         &none         &none         &none         &none           &none   &none  &none   &none  &none  &sys_reset
                             &none         &trans        &none         &trans          &trans  &none  &trans  &none
            >;
        };
    };
};
